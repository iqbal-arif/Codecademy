.grid {
  display: grid;
  border: 2px blue solid;
  height: 500px;
  width: 500px;
  grid-template: repeat(4, 1fr 2fr) / repeat(4, 3fr 2fr);
  gap: 5px;
}

/*
1. In the a ruleset, set grid-row-start so the item begins in the fifth row.
2. Set grid-row-end so the item occupies the fifth and sixth rows
*/
/***
.a {
  grid-row-start: 5;
  grid-row-end: 7;
}
***/

/*
Refactor your code from the last exercise. Replace grid-row-start and grid-row-end with grid-row. Make sure the item still takes up rows five and six.
*/

/*
Deactivated for Gird Column property.
.a {
  grid-row: 5/7;
}
*/

.box {
  background-color: beige;
  color: black;
  border-radius: 5px;
  border: 2px dodgerblue solid;
}

/*
Let’s make box b take up a few rows. Go back to style.css, in the .b ruleset, use grid-row with span to make the item take up rows two through four.

Next, make box b take up six columns. In style.css, in the .b ruleset, use grid-column to set its starting column to 2. Use span to make the item take up six columns.
*/

.b {
  /*
  grid-row: 2 / span 3;
  grid-column: 2 / span 6;
  */
  /* Refactored the above for Grid Area Ex. */
  grid-area: 2/2 / span 3 / span 6;
}

/*
Now let’s go back to the box a ruleset. Refactor the grid-column-start and grid-column-end declarations into a shorthand grid-column declaration. The grid item should still start in the first column and span 2 columns using the span keyword.
*/
.a {
  /* grid-row: 5 / 7; */
  /* Refactored for gird-column
   grid-column-start: 1; */
  /*Refactored for gird-column
     grid-column-end: 3;  */
  /* grid-column: 1 / span 2; */
  /* Refactored for Gird Area */
  grid-area: 5/1 / span 2 / span 2;
}

/*
In style.css, inside the .c ruleset, use grid-area to make the element start at row six and column eight. Then have it take up three rows and one column. Use span for both ending values.
*/

.c {
  grid-area: 6/8 / span3/span1;
}

/*
Let’s refactor the code for the other two items in the grid. Start with item b. Replace grid-row and grid-column with grid-area. Make sure the item still takes up the same amount of space.

Refactored for .b
  grid-area: 2/2/span 3/span 6;

*/
/*
Lastly, refactor item a. Replace grid-row and grid-column with grid-area. Again, use span to set the end of the rows and columns.
Refactored for .a
  grid-area: 5/1/ span 2 / span 2;

*/
